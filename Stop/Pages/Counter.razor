@page "/counter"
@using System.Diagnostics
@using System.Threading
@using Stop.Services
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Services.BlazorTimer Timer


<p class="text-center">
    <button class="btn btn-outline-success rounded-circle btn-jogo" @onclick="Iniciar">@Mensagem</button>
</p>
<h1 class="text-center text-secondary" style="font-size:50px">@TempoMin:@TempoSec</h1>
<h1 class="badge-danger text-center @BtnStatus">@Status</h1>
<button class="btn btn-danger btn-block @BtnStop" @onclick="Stop">Stop</button>
<button class="btn btn-warning btn-block @BtnFinalizar" @onclick="Finalizar">Finalizar Rodada</button>
<button class="btn btn-outline-secondary btn-block" @onclick="Cancelar">Recomeçar o Jogo</button>


@code {
    private int currentCount = 0;
    private string Mensagem = "Começar";
    private string TempoMin = "00";
    private string TempoSec = "00";
    private string TempoMili = "00";
    private string Status = "";
    private string BtnStatus = "d-none";
    private string BtnStop = "d-none";
    private string BtnFinalizar = "d-none";
    private TimeSpan _timeLeft;

    protected override void OnInitialized()
    {
        if (Utils.Tempo <= 0)
        {
            Nav.NavigateTo("/");
        };

        base.OnInitialized();
    }


    private void Cancelar()
    {
        Nav.NavigateTo("/");
    }

    async void Iniciar()
    {
        var letras = await LocalStorage.GetItemAsync<string>("jogo");
        Status = "Stop";
        BtnStatus = "d-none";
        BtnStop = "d-block";
        BtnFinalizar = "d-block";

        _timeLeft = new TimeSpan(0, Utils.Tempo, 0);

        for (int i = 0; i < 28; i++)
        {
            var letra = GerarLetra();
            Mensagem = letra;

            if (!string.IsNullOrEmpty(letras))
            {
                if (letras.Contains(letra)) continue;
                letras = $"{letras} {letra}";
                await LocalStorage.SetItemAsync("jogo", letras);
                await Task.Run(StartTimer);
                return;
            }
            else
            {
                await LocalStorage.SetItemAsync("jogo", letra);
                await Task.Run(StartTimer);
                return;

            }

        }

        Mensagem = "Fim de jogo";

    }

    string GerarLetra()
    {
        var random = new Random();

        var flt = random.NextDouble();
        var shift = Convert.ToInt32(Math.Floor(25 * flt));
        return Convert.ToChar(shift + 65).ToString();
    }

    private async Task StartTimer()
    {
        while (_timeLeft > new TimeSpan())
        {
            await Task.Delay(1000);
            _timeLeft = _timeLeft.Subtract(new TimeSpan(0, 0, 1));
            currentCount = _timeLeft.Seconds;
            TempoMin = _timeLeft.Minutes.ToString("00");
            TempoSec = _timeLeft.Seconds.ToString("00");
            if (_timeLeft.Minutes == 0)
            {
                BtnStop = "d-none";
            }
            StateHasChanged();
        }


        await AfterTime();
        StateHasChanged();

    }
    Task AfterTime()
    {
        Status = "Rodada Encerrada";
        BtnStatus = "d-block";
        BtnStop = "d-none";
        BtnFinalizar = "d-none";
        _timeLeft = new TimeSpan(0, 0, 0);
        return Task.CompletedTask;
    }

    Task Finalizar()
    {
        Status = "Rodada Encerrada";
        BtnStatus = "d-block";
        BtnStop = "d-none";
        BtnFinalizar = "d-none";
        _timeLeft = new TimeSpan(0, 0, 1);
        return Task.CompletedTask;
    }

    Task Stop()
    {
        if (_timeLeft.Minutes > 0)
        {
            _timeLeft = new TimeSpan(0, 1, 0);
        }
        BtnStatus = "d-none";
        BtnStop = "d-none";
        BtnFinalizar = "d-block";
        return Task.CompletedTask;
    }
}
